// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables, unused_import, unused_local_variable, unused_element, avoid_print, avoid_unnecessary_containers, unused_field, unnecessary_import, unnecessary_brace_in_string_interps

import 'dart:convert';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_application_1/screens/components/favcards.dart';
import 'package:flutter_application_1/screens/components/review_parse.dart';
import 'package:flutter_application_1/screens/components/parse/searchParse.dart';
import 'package:flutter_application_1/screens/components/view_business_accpage.dart';
import 'package:flutter_application_1/screens/models/user_model.dart';
import 'package:flutter_application_1/screens/models/message_modal.dart';
import 'package:flutter_application_1/screens/components/details.dart';
import 'package:comment_box/comment/comment.dart';
import 'package:comment_box/comment/test.dart';
import 'package:comment_box/main.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:http/http.dart' as http;
import 'package:modal_bottom_sheet/modal_bottom_sheet.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_application_1/network/api.dart';

class FavouritesPage extends StatefulWidget {
  const FavouritesPage({Key? key}) : super(key: key);

  @override
  State<FavouritesPage> createState() => _FavouritesPageState();
}

late Stream favouriteStream;
List accs = <Autogenerated>[];
bool pagestatus = false;

class _FavouritesPageState extends State<FavouritesPage> {
  @override
  void initState() {
    favouriteStream = fetchUserFavourites();
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          elevation: 0,
          backgroundColor: Colors.white,
          leading: null,
          title: Text(
            "Saved List",
            style: TextStyle(
              color: Colors.black,
              fontSize: 15,
              fontWeight: FontWeight.bold,
            ),
          )),
      body: StreamBuilder(
        stream: favouriteStream,
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(
              child: Text("Error"),
            );
          } else if (snapshot.hasData) {
            return Column(
              children: [
                SizedBox(height: 10),
                pagestatus == false
                    ? Center(
                        child: Text("No saved Favourite List"),
                      )
                    : Container(),
                Expanded(
                  child: buildFavouritePage(context),
                ),
              ],
            );
          } else if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.connectionState == ConnectionState.active) {
            return Center(child: CircularProgressIndicator());
          } else {
            return Center(child: CircularProgressIndicator());
          }
        },
      ),
    );
  }

  buildFavouritePage(BuildContext context) {
    return ListView.builder(
      itemCount: accs.length,
      itemBuilder: (context, index) {
        return GestureDetector(
          onTap: () {
            showMaterialModalBottomSheet(
              context: context,
              builder: (context) => ViewBusinessAccpage(
                businessName: accs[index].businessName,
                id: accs[index].businessAccId,
              ),
            );
          },
          child: CustomListItem(
            user: accs[index].businessDescripition!,
            viewCount: accs[index].likes != null ? accs[index].likes! : 0,
            thumbnail: accs[index].image != null
                ? Container(
                    child: Image.network(
                      "http://localhost:8000/api/fetch-business-acc-image/${accs[index].image}",
                    ),
                  )
                : Container(
                    decoration: const BoxDecoration(color: Colors.blueGrey),
                    child: Center(
                      child: Icon(
                        Icons.home,
                        color: Colors.white,
                      ),
                    ),
                  ),
            title: accs[index].businessName!,
          ),
        );
      },
      padding: const EdgeInsets.all(8.0),
      itemExtent: 106.0,
    );
  }

  Stream fetchUserFavourites() async* {
    final prefs = await SharedPreferences.getInstance();
    final _id = prefs.getInt('id');

    print("fetch business id${_id}");

    final response = await http.post(
      Uri.parse("http://localhost:8000/api/business/fetch/favourite"),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer ${prefs.getString("token")}'
      },
    );
    if (response.statusCode == 200) {
      final _accs = json.decode(response.body);
      print(_accs);
      if (_accs == 0) {
        print("list returned empty");
        pagestatus = false;
        yield pagestatus;
      } else {
        print("list not empty");
        print("error in new empty ${_accs[0]} here");

        for (var acc in _accs) {
          accs.add(Autogenerated.fromJson(acc));
        }

        await Future.delayed(const Duration(seconds: 1));
        print(" state $accs");
        yield accs;
      }
      /* 
      print("error in new empty ${_accs[0]} here");
      if (_accs.isNotEmpty()) {
        for (var acc in _accs) {
          accs.add(Autogenerated.fromJson(acc));
        }

        await Future.delayed(const Duration(seconds: 1));
        print(" state $accs");
        yield accs;
      } else {
        _accs.clear();
        yield accs;
      }*/
    }
  }
}
