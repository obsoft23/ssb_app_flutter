// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables, unused_import, unused_local_variable, unused_element, avoid_print, use_key_in_widget_constructors, avoid_unnecessary_containers, unnecessary_brace_in_string_interps, unnecessary_null_comparison, unnecessary_import

import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_application_1/screens/components/acc_view.dart';
import 'package:flutter_application_1/screens/components/search_list_class.dart';
import 'package:flutter_application_1/screens/components/view_business_accpage.dart';
import 'package:flutter_application_1/screens/profile.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';
import 'package:modal_bottom_sheet/modal_bottom_sheet.dart';
import 'package:loading_indicator/loading_indicator.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;

import '../search.dart';

List businessAccounts = [];
var accs = <Autogenerated>[];

class BusinessAccount {}

class SearchPageBody extends StatelessWidget {
  const SearchPageBody({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Categories(),
        Expanded(
          child: ItemCard(),
        ),
      ],
    );
  }
}

class ItemCard extends StatelessWidget {
  @override
  const ItemCard({
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final List<Map> myProducts =
        List.generate(1, (index) => {"id": index, "name": "Product $index"})
            .toList();
    double deviceWidth = MediaQuery.of(context).size.width;
    double deviceHeight = MediaQuery.of(context).size.height;
    return GridView.builder(
      itemCount: 15,
      itemBuilder: (context, index) => ItemTile(index),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 1,
      ),
    );
  }
}

class Categories extends StatefulWidget {
  const Categories({Key? key}) : super(key: key);

  @override
  _CategoriesState createState() => _CategoriesState();
}

class _CategoriesState extends State<Categories> {
  List<String> categories = [
    "Common",
    "Entertainment",
    "Places",
    "religion",
    "Food and Drinks",
    "electrician",
    "Housing",
    "electrician",
  ];
  int selectedIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.white,
      height: 25,
      child: ListView.builder(
        itemCount: categories.length,
        scrollDirection: Axis.horizontal,
        itemBuilder: ((context, index) => buildCategory(index)),
      ),
    );
  }

  Widget buildCategory(int index) {
    return GestureDetector(
      onTap: () {
        setState(() {});
        print("hello");
        selectedIndex = index;
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 12.0),
        child: Column(
          children: [
            Text(
              categories[index],
              style: TextStyle(
                fontWeight: FontWeight.w500,
                color: selectedIndex == index
                    ? Colors.blueAccent
                    : Colors.grey[500],
              ),
            ),
            Container(
              margin: EdgeInsets.only(top: 5),
              height: 2,
              width: 30,
              color: selectedIndex == index
                  ? Colors.blueAccent
                  : Colors.transparent,
            ),
          ],
        ),
      ),
    );
  }
}

class ItemTile extends StatelessWidget {
  final int itemNo;

  const ItemTile(
    this.itemNo,
  );

  @override
  Widget build(BuildContext context) {
    final Color color = Colors.primaries[itemNo % Colors.primaries.length];
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: ListTile(
        tileColor: color.withOpacity(0.3),
        onTap: () {
          print(searchResults[itemNo]);
          showMaterialModalBottomSheet(
            context: context,
            builder: (context) =>
                searchVocation(context, searchResults[itemNo]),
          );
        },
        title: Center(
          child: searchResults.isNotEmpty
              ? Text(
                  ' ${searchResults[itemNo]}',
                  key: Key('text_$itemNo'),
                )
              : null,
        ),
      ),
    );
  }

  searchVocation(context, title) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 1,
        leading: GestureDetector(
          onTap: () {
            Navigator.pop(context);
          },
          child: Container(
            margin: EdgeInsets.only(left: 8),
            child: Center(
              child: Icon(Icons.arrow_back_ios, color: Colors.blue, size: 16),
            ),
          ),
        ),
        title:
            Text('$title', style: TextStyle(color: Colors.black, fontSize: 16)),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            color: Colors.blueAccent,
            onPressed: () {
              showSearch(context: context, delegate: MySearchDelegate());
            },
          ),
        ],
      ),
      body: StreamBuilder(
        stream: findUserRequest(title),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(
              child: Text("Error"),
            );
          } else if (snapshot.hasData) {
            return businessList();
          } else if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
                child: CircularProgressIndicator(
              color: Colors.green,
            ));
          } else {
            return Center(child: CircularProgressIndicator());
          }
        },
      ),
    );
  }
}

Stream findUserRequest(title) async* {
  SharedPreferences localStorage = await SharedPreferences.getInstance();
  final _data = {
    "sub_category": title,
    "latitude": latitude,
    "longtitude": longtitude,
  };
  print("query to be sent to DB${_data}");
  final response = await http.post(
    Uri.parse("http://localhost:8000/api/vocations/find"),
    body: jsonEncode(_data),
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    },
  );

  if (response.statusCode == 200) {
    final _accs = json.decode(response.body);
    for (var acc in _accs) {
      accs.add(Autogenerated.fromJson(acc));
    }

    await Future.delayed(const Duration(seconds: 1));
    yield accs;
  }
}

@override
Widget businessList() {
  return ListView.builder(
    itemCount: accs.length,
    itemBuilder: (context, index) {
      final acc = accs[index];

      return GestureDetector(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => ViewBusinessAccpage(
                businessName: acc.businessName,
                id: acc.businessAccId,
              ),
            ),
          );
        },
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: CustomListItemTwo(
              thumbnail: acc.image != null
                  ? Container(
                      child: Image.network(
                        "http://localhost:8000/api/fetch-user-image/${userDetails.image}",
                      ),
                    )
                  : Container(
                      decoration: const BoxDecoration(color: Colors.grey),
                      child: Center(
                        child: Icon(Icons.home),
                      ),
                    ),
              title: acc.businessName!,
              subtitle: acc.businessDescripition!,
              author: acc.fullAddress == null ? acc.fullAddress : null,
              publishDate: acc.openingTime! + " : " + acc.closingTime!,
              readDuration: acc.cityOrTown),
        ),
      );
      /*return ListTile(
        leading: acc.image == null
            ? FlutterLogo(
                size: 72,
              )
            : CircleAvatar(
                radius: 70,
                backgroundImage: NetworkImage(
                  "http://localhost:8000/api/fetch-user-image/${userDetails.image}",
                ),
              ),
        title: acc.businessName!.toUpperCase() != null
            ? Text(
                acc.businessName!,
                style: TextStyle(
                  fontWeight: FontWeight.w500,
                ),
              )
            : Text(""),
        subtitle: Text(
          acc.businessDescripition!,
          overflow: TextOverflow.ellipsis,
          style: TextStyle(
            fontFamily: 'Roboto',
            color: Color(0xFF212121),
          ),
        ),
        trailing: Icon(CupertinoIcons.heart),
        isThreeLine: true,
      );
      
      
      RatingBar.builder(
            initialRating: 4,
            minRating: 3,
            itemSize: 10,
            direction: Axis.horizontal,
            allowHalfRating: true,
            itemCount: 5,
            itemPadding: EdgeInsets.symmetric(horizontal: 4.0),
            itemBuilder: (context, _) => Icon(
              Icons.star,
              color: Colors.amber,
            ),
            onRatingUpdate: (rating) {
              print(rating);
            },
          ),*/
    },
  );
}
